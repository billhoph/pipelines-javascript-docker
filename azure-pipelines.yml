# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

pool:
  vmImage: ubuntu-latest

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '37dfe4f3-bb18-406e-ad7a-6a3fcf70f9a6'
  imageRepository: 'fwddemoapp'
  containerRegistry: 'fwddemoacr.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'fwddemoacr098d-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: RepoScan
  displayName: Repo Scanning stage
  jobs:
  - job: RepoScan
    displayName: Scanning Github Repo
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.8'
      displayName: 'Install Python 3.8'
    - script: pip install checkov
      displayName: 'Install Checkov'
    - script: checkov -d . --bc-api-key 45af728a-ef0f-402e-b4c3-acb9ed5f2c01::Lio1DUw9nzQEJZPcd/DT2Y89n4E= --repo-id billhoph/pipelines-javascript-docker --branch main -o cli -o junitxml --output-file-path console,CheckovReport.xml 
      displayName: 'Scan with Prisma Cloud'
      continueOnError: true
      env:
        PRISMA_API_URL: https://api.sg.prismacloud.io
    - task: PublishTestResults@2
      inputs:
        testRunTitle: "Checkov Results"
        failTaskOnFailedTests: false
        testResultsFormat: "JUnit"
        testResultsFiles: "CheckovReport.xml"
        searchFolder: "$(System.DefaultWorkingDirectory)"
      displayName: "Publish > Checkov scan results"

- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: prisma-cloud-compute-scan@3
      displayName: 'Container Image Scanning'
      continueOnError: true
      inputs:
        scanType: images
        twistlockService: 'prisma-cloud-demo'
        artifact: $(containerRegistry)/$(imageRepository):$(tag)
        project: 'fwd-demo-test'
    - upload: manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'billhophpipelinesjavascriptdocker.fwd-demo'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

